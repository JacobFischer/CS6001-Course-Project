dumbaes is a really dumb implementation of AES-128.

It's a class project. It should give you the right answer, but it is not fit for
real world use. The implementation is slow and stupid. It's vulnerable to all
sorts of side-channel attacks. Don't use it.

Pronounciation: you can probably figure this out for yourself. ;)

Requirements for tarball builds:

 * A C++14 compiler for binary literals. (GCC 5 should work. Tested with GCC 6.)
 * GLib >= 2.32 (only for the tests and demos).
 * GTK+ >= 3.10 (only for the demo GUI).
 * Linux kernal >= 3.17.
 * nettle >= 3.0 (only for the tests).

Those versions are pretty much arbitrary guesses and are not enforced at
configure time. Older package versions may or may not be sufficient.

Additional requirements for builds from git:

 * autoconf, automake, libtool
 * A quite recent version of autoconf-archive (uses macros added in 2015)

Usage:

# If building from a tarball:
./configure
# Build the code:
make
# Running the tests would be a dandy swell idea:
make check

If you're building from git, you need to run autogen.sh rather than configure.

-Werror is enabled for builds from git. The recommended way to turn it off if
you hit compiler warnings is to pass --disable-Werror to configure.

Once it's built, use the example program to encrypt something:

demos/dumbaes-cli -o output_filename -k private_key_filename -e plaintext_filename -m cbc

Or to decrypt something:

demos/dumbaes-cli -o output_filename -k private_key_filename -d ciphertext_filename -m cbc

-o: File to output results.
-k: File containing the AES key.
-d: File to decrypt.
-e: File to encrypt.
-m: AES mode. Currently supports CBC 'cbc' or ECB 'ecb'
(Note that the file containing the private key must be exactly 16 bytes long.
Also note that you'll want a hex viewer like xxd to make sense of the result.)

You can install dumbaes with `sudo make install` if you really want to, but it
is dumb, so why would you?

Directory layout:

- dumbaes/
-- api/ - The public C API. Includes documentation of external functions.
-- build-aux/ - Build goo. Nothing interesting here.
-- demos/ - Applications to demo usage of the libdumbaes API.
-- m4/ - M4sh build goo. Nothing interesting here either.
-- src/ - Cryptography implementation
-- test/ - Tests of course

Note that we do use nettle, but only in the tests and solely for the purpose of
verifying that our output matches that of an established cryptographic library.
We have opted not to use OpenSSL because nobody likes it.
